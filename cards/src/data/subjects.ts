import { Subject } from '../types';

export const subjects: Subject[] = [
  {
    id: 'algorithms',
    title: 'Введение в алгоритмы',
    description: 'Изучай фундаментальные алгоритмы и структуры данных',
    icon: 'algorithm',
    color: 'bg-purple-500',
    estimatedMinutes: 25,
    difficulty: 'Средне',
    xpReward: 15,
    lessons: [
      {
        id: 'algo-basics',
        title: 'Основы алгоритмов',
        theory: [
          {
            id: 'what-is-algorithm',
            title: 'Что такое алгоритм?',
            type: 'text',
            content: `<h3>Определение алгоритма</h3>
            
            <p><strong>Алгоритм</strong> — это конечная последовательность однозначных предписаний, исполнение которых позволяет решать задачи определенного класса.</p>
            
            <h4>Свойства алгоритма:</h4>
            <ul>
              <li><strong>Дискретность</strong> — алгоритм состоит из отдельных шагов</li>
              <li><strong>Определенность</strong> — каждый шаг должен быть точно определен</li>
              <li><strong>Результативность</strong> — алгоритм должен приводить к результату</li>
              <li><strong>Массовость</strong> — алгоритм должен работать для любых допустимых данных</li>
            </ul>
            
            <p>Алгоритмы окружают нас везде: от простых математических вычислений до сложных систем искусственного интеллекта.</p>`
          },
          {
            id: 'algorithm-complexity',
            title: 'Сложность алгоритмов',
            type: 'text',
            content: `<h3>Временная и пространственная сложность</h3>
            
            <p>Для оценки эффективности алгоритмов используется <strong>асимптотическая нотация</strong>:</p>
            
            <ul>
              <li><strong>O(1)</strong> — константная сложность</li>
              <li><strong>O(log n)</strong> — логарифмическая сложность</li>
              <li><strong>O(n)</strong> — линейная сложность</li>
              <li><strong>O(n²)</strong> — квадратичная сложность</li>
              <li><strong>O(2ⁿ)</strong> — экспоненциальная сложность</li>
            </ul>
            
            <p><strong>Временная сложность</strong> характеризует время выполнения алгоритма в зависимости от размера входных данных.</p>
            
            <p><strong>Пространственная сложность</strong> характеризует количество памяти, необходимое для работы алгоритма.</p>`
          },
          {
            id: 'simple-algorithm-example',
            title: 'Пример простого алгоритма',
            type: 'code',
            codeLanguage: 'python',
            content: `# Алгоритм поиска максимального элемента в списке
def find_max(numbers):
    """
    Находит максимальный элемент в списке чисел
    Временная сложность: O(n)
    Пространственная сложность: O(1)
    """
    if not numbers:  # Проверяем, что список не пустой
        return None
    
    max_value = numbers[0]  # Инициализируем максимум первым элементом
    
    # Проходим по остальным элементам
    for num in numbers[1:]:
        if num > max_value:
            max_value = num
    
    return max_value

# Пример использования
numbers = [3, 7, 2, 9, 1, 5]
result = find_max(numbers)
print(f"Максимальное значение: {result}")  # Вывод: 9`
          }
        ],
        practice: [
          {
            id: 'q1',
            type: 'multiple-choice',
            question: 'Какая из характеристик НЕ является свойством алгоритма?',
            options: [
              'Дискретность',
              'Определенность',
              'Бесконечность',
              'Результативность'
            ],
            correctAnswer: 2,
            explanation: 'Алгоритм должен быть конечным, то есть завершаться за конечное число шагов.',
            hint: 'Подумайте о том, должен ли алгоритм когда-нибудь заканчиваться.'
          },
          {
            id: 'q2',
            type: 'multiple-choice',
            question: 'Какая временная сложность у алгоритма поиска элемента в неотсортированном массиве?',
            options: [
              'O(1)',
              'O(log n)',
              'O(n)',
              'O(n²)'
            ],
            correctAnswer: 2,
            explanation: 'В худшем случае придется проверить все n элементов массива.',
            hint: 'Рассмотрите худший случай - когда элемент находится в конце или отсутствует.'
          },
          {
            id: 'q3',
            type: 'multiple-choice',
            question: 'Что означает нотация O(log n)?',
            options: [
              'Константное время выполнения',
              'Линейное время выполнения',
              'Логарифмическое время выполнения',
              'Квадратичное время выполнения'
            ],
            correctAnswer: 2,
            explanation: 'O(log n) означает, что время выполнения растет логарифмически от размера входных данных.',
            hint: 'Логарифм растет очень медленно по сравнению с линейной функцией.'
          },
          {
            id: 'q4',
            type: 'multiple-choice',
            question: 'Какой алгоритм сортировки имеет среднюю временную сложность O(n log n)?',
            options: [
              'Пузырьковая сортировка',
              'Сортировка выбором',
              'Быстрая сортировка',
              'Все вышеперечисленные'
            ],
            correctAnswer: 2,
            explanation: 'Быстрая сортировка имеет среднюю сложность O(n log n), в то время как пузырьковая и сортировка выбором имеют O(n²).',
            hint: 'Подумайте о методе "разделяй и властвуй".'
          },
          {
            id: 'q5',
            type: 'multiple-choice',
            question: 'Что такое массовость алгоритма?',
            options: [
              'Алгоритм работает быстро',
              'Алгоритм использует много памяти',
              'Алгоритм решает класс задач, а не одну конкретную',
              'Алгоритм сложен для понимания'
            ],
            correctAnswer: 2,
            explanation: 'Массовость означает, что алгоритм должен решать не одну конкретную задачу, а целый класс однотипных задач.',
            hint: 'Алгоритм должен работать для любых допустимых входных данных.'
          },
          {
            id: 'q6',
            type: 'coding',
            question: 'Напишите функцию для поиска минимального элемента в списке чисел.',
            codeTemplate: `def find_min(numbers):
    # Ваш код здесь
    pass

# Тест
print(find_min([5, 2, 8, 1, 9]))  # Должно вывести: 1`,
            explanation: 'Алгоритм аналогичен поиску максимума, но сравниваем на меньше.',
            hint: 'Инициализируйте минимум первым элементом и сравнивайте с остальными.'
          },
          {
            id: 'q7',
            type: 'coding',
            question: 'Реализуйте функцию подсчета количества четных чисел в списке.',
            codeTemplate: `def count_even(numbers):
    # Ваш код здесь
    pass

# Тест
print(count_even([1, 2, 3, 4, 5, 6]))  # Должно вывести: 3`,
            explanation: 'Используйте оператор % для проверки четности числа.',
            hint: 'Число четное, если оно делится на 2 без остатка (num % 2 == 0).'
          },
          {
            id: 'q8',
            type: 'coding',
            question: 'Напишите алгоритм линейного поиска элемента в списке.',
            codeTemplate: `def linear_search(arr, target):
    # Возвращает индекс элемента или -1, если не найден
    pass

# Тест
print(linear_search([1, 3, 5, 7, 9], 5))  # Должно вывести: 2`,
            explanation: 'Линейный поиск проверяет каждый элемент последовательно.',
            hint: 'Переберите элементы с помощью enumerate() или range(len()).'
          },
          {
            id: 'q9',
            type: 'coding',
            question: 'Реализуйте функцию для вычисления факториала числа.',
            codeTemplate: `def factorial(n):
    # Вычисляет n! = 1 * 2 * 3 * ... * n
    pass

# Тест
print(factorial(5))  # Должно вывести: 120`,
            explanation: 'Факториал можно вычислить с помощью цикла или рекурсии.',
            hint: 'n! = n * (n-1) * (n-2) * ... * 1, также 0! = 1.'
          },
          {
            id: 'q10',
            type: 'coding',
            question: 'Создайте функцию для проверки, является ли число простым.',
            codeTemplate: `def is_prime(n):
    # Возвращает True, если число простое
    pass

# Тест
print(is_prime(17))  # Должно вывести: True
print(is_prime(15))  # Должно вывести: False`,
            explanation: 'Простое число делится только на 1 и на себя.',
            hint: 'Проверьте делимость на числа от 2 до sqrt(n).'
          },
          {
            id: 'q11',
            type: 'coding',
            question: 'Напишите алгоритм сортировки пузырьком.',
            codeTemplate: `def bubble_sort(arr):
    # Сортировка массива методом пузырька
    # Изменяет исходный массив
    pass

# Тест
nums = [64, 34, 25, 12, 22, 11, 90]
bubble_sort(nums)
print(nums)  # Должно вывести отсортированный массив`,
            explanation: 'Пузырьковая сортировка сравнивает соседние элементы и меняет их местами.',
            hint: 'Используйте два вложенных цикла для сравнения и обмена элементов.'
          },
          {
            id: 'q12',
            type: 'coding',
            question: 'Реализуйте алгоритм бинарного поиска в отсортированном массиве.',
            codeTemplate: `def binary_search(arr, target):
    # Возвращает индекс элемента или -1
    pass

# Тест
sorted_arr = [1, 3, 5, 7, 9, 11, 13, 15]
print(binary_search(sorted_arr, 7))  # Должно вывести: 3`,
            explanation: 'Бинарный поиск работает по принципу "разделяй и властвуй".',
            hint: 'Сравнивайте с средним элементом и отбрасывайте половину массива.'
          },
          {
            id: 'q13',
            type: 'open-ended',
            question: 'Объясните разницу между алгоритмом и программой. Приведите примеры.',
            explanation: 'Алгоритм - это абстрактное описание решения, программа - его конкретная реализация.',
            hint: 'Подумайте о том, что алгоритм не зависит от языка программирования.'
          },
          {
            id: 'q14',
            type: 'open-ended',
            question: 'Опишите ситуации из реальной жизни, где важна временная сложность алгоритма.',
            explanation: 'Временная сложность критична в системах реального времени, больших данных, веб-сервисах.',
            hint: 'Подумайте о поисковых системах, играх, медицинских приборах.'
          },
          {
            id: 'q15',
            type: 'open-ended',
            question: 'Как бы вы объяснили концепцию рекурсии простыми словами? Приведите житейский пример.',
            explanation: 'Рекурсия - это когда решение большой задачи сводится к решению похожих, но меньших задач.',
            hint: 'Подумайте о матрешках, зеркалах друг напротив друга или поиске файла в папках.'
          }
        ]
      }
    ]
  },
  {
    id: 'python-basics',
    title: 'Основы Python',
    description: 'Изучай синтаксис и основы программирования на Python',
    icon: 'code',
    color: 'bg-green-500',
    estimatedMinutes: 20,
    difficulty: 'Легко',
    xpReward: 12,
    lessons: [
      {
        id: 'python-intro',
        title: 'Введение в Python',
        theory: [
          {
            id: 'why-python',
            title: 'Почему Python?',
            type: 'text',
            content: `<h3>Python - язык программирования для всех</h3>
            
            <p><strong>Python</strong> — это высокоуровневый язык программирования, который отлично подходит для начинающих благодаря своему простому и читаемому синтаксису.</p>
            
            <h4>Преимущества Python:</h4>
            <ul>
              <li><strong>Простота изучения</strong> — минимум служебных символов</li>
              <li><strong>Читаемость кода</strong> — код похож на естественный язык</li>
              <li><strong>Универсальность</strong> — веб-разработка, анализ данных, ИИ, автоматизация</li>
              <li><strong>Большое сообщество</strong> — множество библиотек и помощи</li>
              <li><strong>Кроссплатформенность</strong> — работает на Windows, Mac, Linux</li>
            </ul>
            
            <p>Python используют такие компании как Google, Netflix, Instagram, Spotify и многие другие!</p>`
          },
          {
            id: 'python-syntax',
            title: 'Базовый синтаксис Python',
            type: 'code',
            codeLanguage: 'python',
            content: `# Комментарии в Python начинаются с символа #
# Это комментарий - он не выполняется программой

# Вывод текста на экран
print("Привет, мир!")
print("Python - это просто!")

# Переменные - контейнеры для хранения данных
name = "Анна"        # Строка (string)
age = 25             # Целое число (integer)  
height = 170.5       # Десятичное число (float)
is_student = True    # Логическое значение (boolean)

# Вывод значений переменных
print("Имя:", name)
print("Возраст:", age)
print("Рост:", height)
print("Студент:", is_student)

# Python чувствителен к отступам!
# Отступы определяют блоки кода
if age >= 18:
    print("Совершеннолетний")  # 4 пробела отступ
else:
    print("Несовершеннолетний")  # 4 пробела отступ`
          },
          {
            id: 'data-types',
            title: 'Типы данных в Python',
            type: 'text',
            content: `<h3>Основные типы данных</h3>
            
            <h4>Числовые типы:</h4>
            <ul>
              <li><strong>int</strong> — целые числа: 42, -17, 0</li>
              <li><strong>float</strong> — числа с плавающей точкой: 3.14, -2.5, 0.0</li>
            </ul>
            
            <h4>Текстовый тип:</h4>
            <ul>
              <li><strong>str</strong> — строки: "Привет", 'Python', """многострочный текст"""</li>
            </ul>
            
            <h4>Логический тип:</h4>
            <ul>
              <li><strong>bool</strong> — логические значения: True, False</li>
            </ul>
            
            <h4>Коллекции:</h4>
            <ul>
              <li><strong>list</strong> — списки: [1, 2, 3], ["a", "b", "c"]</li>
              <li><strong>tuple</strong> — кортежи: (1, 2, 3), ("x", "y")</li>
              <li><strong>dict</strong> — словари: {"имя": "Анна", "возраст": 25}</li>
            </ul>
            
            <p>Python автоматически определяет тип данных — это называется <strong>динамической типизацией</strong>.</p>`
          },
          {
            id: 'variables-operations',
            title: 'Переменные и операции',
            type: 'code',
            codeLanguage: 'python',
            content: `# Создание и изменение переменных
x = 10
y = 5

# Арифметические операции
print("Сложение:", x + y)        # 15
print("Вычитание:", x - y)       # 5  
print("Умножение:", x * y)       # 50
print("Деление:", x / y)         # 2.0
print("Целочисленное деление:", x // y)  # 2
print("Остаток от деления:", x % y)      # 0
print("Возведение в степень:", x ** y)   # 100000

# Работа со строками
first_name = "Анна"
last_name = "Иванова"
full_name = first_name + " " + last_name  # Конкатенация
print("Полное имя:", full_name)

# Длина строки
print("Длина имени:", len(full_name))

# Методы строк
print("Заглавные буквы:", full_name.upper())
print("Строчные буквы:", full_name.lower())

# Логические операции
a = True
b = False
print("a и b:", a and b)    # False
print("a или b:", a or b)   # True
print("не a:", not a)       # False

# Операции сравнения
print("10 больше 5:", 10 > 5)      # True
print("10 равно 5:", 10 == 5)      # False
print("10 не равно 5:", 10 != 5)   # True`
          }
        ],
        practice: [
          {
            id: 'py-q1',
            type: 'multiple-choice',
            question: 'Какой символ используется для комментариев в Python?',
            options: ['#', '//', '/*', '--'],
            correctAnswer: 0,
            explanation: 'В Python комментарии начинаются с символа #.',
            hint: 'Это тот же символ, который используется в социальных сетях для хэштегов.'
          },
          {
            id: 'py-q2',
            type: 'multiple-choice',
            question: 'Какой тип данных у значения True в Python?',
            options: ['str', 'int', 'bool', 'float'],
            correctAnswer: 2,
            explanation: 'True и False - это логические значения типа bool.',
            hint: 'Подумайте о типе данных для логических значений.'
          },
          {
            id: 'py-q3',
            type: 'multiple-choice',
            question: 'Что выведет код print(5 // 2)?',
            options: ['2.5', '2', '3', 'Ошибка'],
            correctAnswer: 1,
            explanation: 'Оператор // выполняет целочисленное деление, отбрасывая дробную часть.',
            hint: 'Двойной слэш означает деление с округлением вниз.'
          },
          {
            id: 'py-q4',
            type: 'multiple-choice',
            question: 'Как правильно создать переменную с именем студента?',
            options: ['student name = "Иван"', 'student_name = "Иван"', '2student = "Иван"', 'student-name = "Иван"'],
            correctAnswer: 1,
            explanation: 'Имена переменных могут содержать буквы, цифры и знак подчеркивания, но не могут начинаться с цифры или содержать пробелы.',
            hint: 'Используйте знак подчеркивания вместо пробелов.'
          },
          {
            id: 'py-q5',
            type: 'multiple-choice',
            question: 'Что означает динамическая типизация в Python?',
            options: [
              'Переменные должны быть объявлены заранее',
              'Тип переменной определяется автоматически',
              'Переменные не могут менять тип',
              'Типы данных не существуют'
            ],
            correctAnswer: 1,
            explanation: 'Python автоматически определяет тип данных на основе присваиваемого значения.',
            hint: 'Вам не нужно заранее указывать, что переменная будет числом или строкой.'
          },
          {
            id: 'py-q6',
            type: 'coding',
            question: 'Создайте переменные для хранения информации о книге: название, автор, год издания, количество страниц.',
            codeTemplate: `# Создайте переменные с информацией о книге
title = 
author = 
year = 
pages = 

# Выведите информацию
print("Название:", title)
print("Автор:", author) 
print("Год:", year)
print("Страниц:", pages)`,
            explanation: 'Используйте подходящие типы данных: строки для текста, числа для количественных значений.',
            hint: 'Название и автор - строки (в кавычках), год и страницы - числа.'
          },
          {
            id: 'py-q7',
            type: 'coding',
            question: 'Напишите программу для вычисления площади прямоугольника.',
            codeTemplate: `# Задайте длину и ширину прямоугольника
length = 
width = 

# Вычислите площадь
area = 

# Выведите результат
print("Площадь прямоугольника:", area)`,
            explanation: 'Площадь прямоугольника вычисляется как произведение длины на ширину.',
            hint: 'area = length * width'
          },
          {
            id: 'py-q8',
            type: 'coding',
            question: 'Создайте программу для перевода температуры из Цельсия в Фаренгейты.',
            codeTemplate: `# Температура в Цельсиях
celsius = 25

# Формула: F = C * 9/5 + 32
fahrenheit = 

print(f"{celsius}°C = {fahrenheit}°F")`,
            explanation: 'Формула перевода: F = C × 9/5 + 32',
            hint: 'Умножьте на 9, разделите на 5 и прибавьте 32.'
          },
          {
            id: 'py-q9',
            type: 'coding',
            question: 'Напишите программу для работы со строками: объедините имя и фамилию.',
            codeTemplate: `first_name = "Мария"
last_name = "Петрова"

# Создайте полное имя
full_name = 

# Выведите длину полного имени
name_length = 

print("Полное имя:", full_name)
print("Количество символов:", name_length)`,
            explanation: 'Используйте оператор + для объединения строк и функцию len() для подсчета символов.',
            hint: 'Не забудьте добавить пробел между именем и фамилией.'
          },
          {
            id: 'py-q10',
            type: 'coding',
            question: 'Создайте калькулятор для вычисления индекса массы тела (ИМТ).',
            codeTemplate: `# Вес в килограммах
weight = 70

# Рост в метрах
height = 1.75

# ИМТ = вес / (рост^2)
bmi = 

print(f"Индекс массы тела: {bmi:.2f}")`,
            explanation: 'ИМТ вычисляется как вес в кг, деленный на квадрат роста в метрах.',
            hint: 'Используйте оператор ** для возведения в степень: height ** 2'
          },
          {
            id: 'py-q11',
            type: 'coding',
            question: 'Напишите программу для вычисления суммы цифр трехзначного числа.',
            codeTemplate: `number = 347

# Получите отдельные цифры
hundreds = number // 100
tens = (number % 100) // 10  
units = number % 10

# Вычислите сумму цифр
digits_sum = 

print(f"Сумма цифр числа {number}: {digits_sum}")`,
            explanation: 'Используйте операции деления и остатка для извлечения отдельных цифр.',
            hint: 'Сложите все три цифры: hundreds + tens + units'
          },
          {
            id: 'py-q12',
            type: 'coding',
            question: 'Создайте программу для обмена значений двух переменных.',
            codeTemplate: `a = 10
b = 20

print("До обмена: a =", a, ", b =", b)

# Обменяйте значения переменных (используйте третью переменную)
temp = 
a = 
b = 

print("После обмена: a =", a, ", b =", b)`,
            explanation: 'Используйте временную переменную для сохранения одного из значений.',
            hint: 'Сохраните a во временной переменной, присвойте a значение b, а b - значение временной переменной.'
          },
          {
            id: 'py-q13',
            type: 'open-ended',
            question: 'Объясните, почему Python считается хорошим языком для изучения программирования. Назовите минимум 3 причины.',
            explanation: 'Python имеет простой синтаксис, читаемый код, большое сообщество, универсальность применения.',
            hint: 'Подумайте о простоте изучения, читаемости и областях применения Python.'
          },
          {
            id: 'py-q14',
            type: 'open-ended',
            question: 'Приведите примеры ситуаций, где важно правильно выбрать тип данных для переменной.',
            explanation: 'Выбор типа данных влияет на точность вычислений, использование памяти и производительность.',
            hint: 'Подумайте о точности вычислений, размере данных, операциях, которые нужно выполнять.'
          },
          {
            id: 'py-q15',
            type: 'open-ended',
            question: 'Какие правила именования переменных в Python вы считаете наиболее важными? Объясните почему.',
            explanation: 'Важны ясность, отсутствие конфликтов с ключевыми словами, соблюдение соглашений PEP 8.',
            hint: 'Думайте о читаемости кода, избежании ошибок, совместимости с соглашениями Python.'
          }
        ]
      }
    ]
  },
  {
    id: 'databases',
    title: 'Базы данных',
    description: 'Основы работы с базами данных и SQL',
    icon: 'database',
    color: 'bg-blue-500',
    estimatedMinutes: 30,
    difficulty: 'Средне',
    xpReward: 18,
    lessons: [
      {
        id: 'db-intro',
        title: 'Введение в базы данных',
        theory: [
          {
            id: 'what-is-database',
            title: 'Что такое база данных?',
            type: 'text',
            content: `<h3>Понятие базы данных</h3>
            
            <p><strong>База данных</strong> — это организованная структура для хранения, управления и поиска больших объемов информации.</p>
            
            <h4>Зачем нужны базы данных:</h4>
            <ul>
              <li><strong>Структурированное хранение</strong> — данные организованы логично</li>
              <li><strong>Быстрый поиск</strong> — можно быстро найти нужную информацию</li>
              <li><strong>Целостность данных</strong> — предотвращение дублирования и ошибок</li>
              <li><strong>Многопользовательский доступ</strong> — несколько пользователей одновременно</li>
              <li><strong>Безопасность</strong> — контроль доступа к информации</li>
            </ul>
            
            <h4>Примеры использования:</h4>
            <ul>
              <li>Интернет-магазины (товары, заказы, клиенты)</li>
              <li>Социальные сети (профили, сообщения, друзья)</li>
              <li>Банки (счета, транзакции, клиенты)</li>
              <li>Школы и университеты (студенты, оценки, курсы)</li>
            </ul>`
          },
          {
            id: 'relational-databases',
            title: 'Реляционные базы данных',
            type: 'diagram',
            content: `Реляционная база данных состоит из таблиц, связанных между собой:

ТАБЛИЦА "Студенты"
┌────┬──────────┬─────────┬─────────────────┐
│ ID │   Имя    │ Возраст │     Email       │
├────┼──────────┼─────────┼─────────────────┤
│ 1  │ Анна     │   20    │ anna@mail.com   │
│ 2  │ Петр     │   22    │ petr@mail.com   │
│ 3  │ Мария    │   19    │ maria@mail.com  │
└────┴──────────┴─────────┴─────────────────┘

ТАБЛИЦА "Курсы"
┌────┬──────────────┬─────────┐
│ ID │   Название   │ Кредиты │
├────┼──────────────┼─────────┤
│ 1  │ Математика   │    5    │
│ 2  │ Программир.  │    6    │
│ 3  │ История      │    3    │
└────┴──────────────┴─────────┘

ТАБЛИЦА "Записи" (связь студентов и курсов)
┌────────────┬─────────┬────────┐
│ Студент_ID │ Курс_ID │ Оценка │
├────────────┼─────────┼────────┤
│     1      │    1    │   5    │
│     1      │    2    │   4    │
│     2      │    1    │   3    │
│     3      │    2    │   5    │
└────────────┴─────────┴────────┘

Основные понятия:
• Таблица - набор связанных данных
• Строка (запись) - один элемент данных
• Столбец (поле) - атрибут данных
• Первичный ключ - уникальный идентификатор
• Внешний ключ - связь между таблицами`
          },
          {
            id: 'sql-basics',
            title: 'Основы SQL',
            type: 'code',
            codeLanguage: 'sql',
            content: `-- SQL (Structured Query Language) - язык для работы с базами данных

-- СОЗДАНИЕ ТАБЛИЦЫ
CREATE TABLE students (
    id INTEGER PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    age INTEGER,
    email VARCHAR(100) UNIQUE
);

-- ДОБАВЛЕНИЕ ДАННЫХ
INSERT INTO students (name, age, email) VALUES 
    ('Анна Иванова', 20, 'anna@example.com'),
    ('Петр Петров', 22, 'petr@example.com'),
    ('Мария Сидорова', 19, 'maria@example.com');

-- ВЫБОРКА ДАННЫХ
-- Все записи
SELECT * FROM students;

-- Конкретные поля
SELECT name, age FROM students;

-- С условием
SELECT * FROM students WHERE age > 20;

-- ОБНОВЛЕНИЕ ДАННЫХ
UPDATE students 
SET age = 21 
WHERE name = 'Анна Иванова';

-- УДАЛЕНИЕ ДАННЫХ
DELETE FROM students WHERE age < 18;

-- СОРТИРОВКА
SELECT * FROM students ORDER BY age DESC;

-- ГРУППИРОВКА И АГРЕГАЦИЯ
SELECT age, COUNT(*) as количество 
FROM students 
GROUP BY age;`
          }
        ],
        practice: [
          {
            id: 'db-q1',
            type: 'multiple-choice',
            question: 'Что такое первичный ключ в базе данных?',
            options: [
              'Самый важный столбец',
              'Уникальный идентификатор записи',
              'Первый столбец в таблице',
              'Пароль для доступа к таблице'
            ],
            correctAnswer: 1,
            explanation: 'Первичный ключ - это поле (или комбинация полей), которое уникально идентифицирует каждую запись в таблице.',
            hint: 'Подумайте о том, как можно однозначно определить каждую строку в таблице.'
          },
          {
            id: 'db-q2',
            type: 'multiple-choice',
            question: 'Какая команда SQL используется для выборки данных?',
            options: ['GET', 'FETCH', 'SELECT', 'RETRIEVE'],
            correctAnswer: 2,
            explanation: 'SELECT - основная команда для извлечения данных из таблиц базы данных.',
            hint: 'Эта команда "выбирает" данные из таблицы.'
          },
          {
            id: 'db-q3',
            type: 'multiple-choice',
            question: 'Что означает СУБД?',
            options: [
              'Система управления большими данными',
              'Система управления базами данных', 
              'Структура управления базовыми данными',
              'Сервер управления бизнес-данными'
            ],
            correctAnswer: 1,
            explanation: 'СУБД - Система Управления Базами Данных, программное обеспечение для создания и управления базами данных.',
            hint: 'Это программа, которая помогает управлять базами данных.'
          },
          {
            id: 'db-q4',
            type: 'multiple-choice',
            question: 'Какой тип связи показывает, что одна запись в первой таблице может соответствовать многим записям во второй таблице?',
            options: ['Один к одному', 'Один ко многим', 'Многие ко многим', 'Нет связи'],
            correctAnswer: 1,
            explanation: 'Связь "один ко многим" означает, что одна запись в родительской таблице может иметь несколько связанных записей в дочерней таблице.',
            hint: 'Например, один студент может быть записан на много курсов.'
          },
          {
            id: 'db-q5',
            type: 'multiple-choice',
            question: 'Что такое нормализация базы данных?',
            options: [
              'Ускорение работы базы данных',
              'Устранение избыточности и обеспечение целостности данных',
              'Увеличение размера базы данных',
              'Создание резервных копий'
            ],
            correctAnswer: 1,
            explanation: 'Нормализация - это процесс организации данных для минимизации избыточности и предотвращения аномалий при обновлении.',
            hint: 'Это процесс, который делает структуру данных более логичной и устраняет дублирование.'
          },
          {
            id: 'db-q6',
            type: 'coding',
            question: 'Напишите SQL-запрос для создания таблицы "Книги" с полями: id, название, автор, год издания.',
            codeTemplate: `-- Создайте таблицу books
CREATE TABLE books (
    
);`,
            explanation: 'Используйте команду CREATE TABLE с указанием типов данных для каждого поля.',
            hint: 'id должен быть PRIMARY KEY, название и автор - VARCHAR, год - INTEGER.'
          },
          {
            id: 'db-q7',
            type: 'coding',
            question: 'Напишите запрос для добавления трех книг в таблицу books.',
            codeTemplate: `-- Добавьте три книги в таблицу
INSERT INTO books (title, author, year) VALUES 
    (),
    (),
    ();`,
            explanation: 'Используйте команду INSERT INTO для добавления записей.',
            hint: 'Укажите значения в кавычках для строковых полей.'
          },
          {
            id: 'db-q8',
            type: 'coding',
            question: 'Напишите запрос для выборки всех книг, изданных после 2000 года.',
            codeTemplate: `-- Выберите книги после 2000 года
SELECT * FROM books 
WHERE ;`,
            explanation: 'Используйте условие WHERE для фильтрации по году издания.',
            hint: 'Используйте оператор > для сравнения года с 2000.'
          },
          {
            id: 'db-q9',
            type: 'coding',
            question: 'Напишите запрос для обновления года издания книги по её названию.',
            codeTemplate: `-- Обновите год издания книги "Война и мир" на 1869
UPDATE books 
SET 
WHERE ;`,
            explanation: 'Используйте команду UPDATE с SET для изменения значения и WHERE для указания условия.',
            hint: 'SET year = новое_значение WHERE title = "название_книги".'
          },
          {
            id: 'db-q10',
            type: 'coding',
            question: 'Напишите запрос для подсчета количества книг каждого автора.',
            codeTemplate: `-- Подсчитайте количество книг по авторам
SELECT author, COUNT(*) as book_count
FROM books
;`,
            explanation: 'Используйте GROUP BY для группировки по авторам и COUNT(*) для подсчета.',
            hint: 'Добавьте GROUP BY author после FROM books.'
          },
          {
            id: 'db-q11',
            type: 'coding',
            question: 'Создайте запрос для выборки книг, отсортированных по году издания (сначала новые).',
            codeTemplate: `-- Отсортируйте книги по году (новые сначала)
SELECT * FROM books
ORDER BY ;`,
            explanation: 'Используйте ORDER BY с DESC для сортировки в убывающем порядке.',
            hint: 'ORDER BY year DESC - сортировка от больших значений к меньшим.'
          },
          {
            id: 'db-q12',
            type: 'coding',
            question: 'Напишите запрос для удаления книг, изданных до 1900 года.',
            codeTemplate: `-- Удалите старые книги
DELETE FROM books 
WHERE ;`,
            explanation: 'Используйте команду DELETE с условием WHERE.',
            hint: 'WHERE year < 1900 выберет книги, изданные до 1900 года.'
          },
          {
            id: 'db-q13',
            type: 'open-ended',
            question: 'Объясните, чем отличается база данных от обычного файла Excel. Какие преимущества дает использование базы данных?',
            explanation: 'База данных обеспечивает лучшую целостность данных, многопользовательский доступ, безопасность и масштабируемость.',
            hint: 'Подумайте о том, что происходит, когда много людей одновременно работают с данными.'
          },
          {
            id: 'db-q14',
            type: 'open-ended',
            question: 'Приведите пример реальной системы, где используются базы данных, и опишите, какие данные там могут храниться.',
            explanation: 'Примеры: интернет-магазины (товары, заказы, клиенты), банки (счета, транзакции), социальные сети (пользователи, посты, связи).',
            hint: 'Выберите любую знакомую вам онлайн-службу и подумайте, какую информацию она должна хранить.'
          },
          {
            id: 'db-q15',
            type: 'open-ended',
            question: 'Почему важно правильно проектировать структуру базы данных на этапе планирования? Что может произойти при плохом проектировании?',
            explanation: 'Плохое проектирование приводит к избыточности данных, сложности обновления, снижению производительности и ошибкам.',
            hint: 'Подумайте о том, что случится, если одни и те же данные будут храниться в нескольких местах.'
          }
        ]
      }
    ]
  },
  {
    id: 'networks',
    title: 'Компьютерные сети',
    description: 'Основы сетевых технологий и интернета',
    icon: 'network',
    color: 'bg-indigo-500',
    estimatedMinutes: 28,
    difficulty: 'Сложно',
    xpReward: 20,
    lessons: [
      {
        id: 'network-basics',
        title: 'Основы компьютерных сетей',
        theory: [
          {
            id: 'what-is-network',
            title: 'Что такое компьютерная сеть?',
            type: 'text',
            content: `<h3>Понятие компьютерной сети</h3>
            
            <p><strong>Компьютерная сеть</strong> — это совокупность компьютеров и других устройств, связанных между собой для обмена информацией и совместного использования ресурсов.</p>
            
            <h4>Основные цели создания сетей:</h4>
            <ul>
              <li><strong>Обмен данными</strong> — передача файлов, сообщений</li>
              <li><strong>Совместное использование ресурсов</strong> — принтеры, хранилища</li>
              <li><strong>Коммуникация</strong> — электронная почта, видеозвонки</li>
              <li><strong>Доступ к информации</strong> — интернет, базы данных</li>
              <li><strong>Распределенные вычисления</strong> — облачные технологии</li>
            </ul>
            
            <h4>Типы сетей по масштабу:</h4>
            <ul>
              <li><strong>LAN (Local Area Network)</strong> — локальная сеть (дом, офис)</li>
              <li><strong>WAN (Wide Area Network)</strong> — глобальная сеть (интернет)</li>
              <li><strong>MAN (Metropolitan Area Network)</strong> — городская сеть</li>
              <li><strong>PAN (Personal Area Network)</strong> — персональная сеть (Bluetooth)</li>
            </ul>`
          },
          {
            id: 'network-topology',
            title: 'Топологии сетей',
            type: 'diagram',
            content: `Топология сети определяет способ соединения устройств:

ЗВЕЗДА (Star)
    [ПК1]     [ПК2]
       \     /
        [HUB]
       /     \
   [ПК3]     [ПК4]

• Все устройства подключены к центральному узлу
• Надежность: сбой одного ПК не влияет на сеть
• Недостаток: сбой центрального узла останавливает всю сеть

КОЛЬЦО (Ring)
[ПК1] → [ПК2] → [ПК3] → [ПК4] → [ПК1]

• Данные передаются по кольцу в одном направлении
• Равный доступ к сети для всех устройств
• Недостаток: сбой одного устройства может нарушить работу

ШИНА (Bus)
[ПК1] ─ [ПК2] ─ [ПК3] ─ [ПК4]
            │
        [Сервер]

• Все устройства подключены к общей шине
• Простота реализации и низкая стоимость
• Недостаток: коллизии при одновременной передаче

СЕТКА (Mesh)
[ПК1] ⟷ [ПК2]
  ⟷  ×   ⟷
[ПК3] ⟷ [ПК4]

• Каждое устройство соединено с каждым
• Максимальная надежность и производительность
• Недостаток: сложность и высокая стоимость`
          },
          {
            id: 'network-protocols',
            title: 'Сетевые протоколы',
            type: 'text',
            content: `<h3>Протоколы передачи данных</h3>
            
            <p><strong>Протокол</strong> — это набор правил и соглашений для передачи данных между устройствами в сети.</p>
            
            <h4>Модель OSI (7 уровней):</h4>
            <ol>
              <li><strong>Физический</strong> — передача битов по кабелю</li>
              <li><strong>Канальный</strong> — обнаружение ошибок, MAC-адреса</li>
              <li><strong>Сетевой</strong> — маршрутизация, IP-адреса</li>
              <li><strong>Транспортный</strong> — надежная доставка, TCP/UDP</li>
              <li><strong>Сеансовый</strong> — установка соединений</li>
              <li><strong>Представления</strong> — шифрование, сжатие</li>
              <li><strong>Прикладной</strong> — HTTP, FTP, SMTP</li>
            </ol>
            
            <h4>Основные протоколы:</h4>
            <ul>
              <li><strong>IP (Internet Protocol)</strong> — адресация и маршрутизация</li>
              <li><strong>TCP (Transmission Control Protocol)</strong> — надежная передача</li>
              <li><strong>UDP (User Datagram Protocol)</strong> — быстрая передача</li>
              <li><strong>HTTP/HTTPS</strong> — веб-страницы</li>
              <li><strong>FTP</strong> — передача файлов</li>
              <li><strong>SMTP</strong> — электронная почта</li>
              <li><strong>DNS</strong> — преобразование имен в IP-адреса</li>
            </ul>`
          },
          {
            id: 'ip-addressing',
            title: 'IP-адресация',
            type: 'code',
            codeLanguage: 'text',
            content: `IP-адрес - уникальный идентификатор устройства в сети

IPv4 АДРЕС (32 бита):
192.168.1.100
  │   │  │ │
  │   │  │ └─ Номер устройства (хоста)
  │   │  └─── Подсеть
  │   └────── Сеть организации  
  └────────── Сеть провайдера

КЛАССЫ IPv4 АДРЕСОВ:
Класс A: 1.0.0.0    - 126.255.255.255  (большие сети)
Класс B: 128.0.0.0  - 191.255.255.255  (средние сети)  
Класс C: 192.0.0.0  - 223.255.255.255  (малые сети)

ЧАСТНЫЕ (ЛОКАЛЬНЫЕ) АДРЕСА:
10.0.0.0     - 10.255.255.255    (Класс A)
172.16.0.0   - 172.31.255.255    (Класс B)
192.168.0.0  - 192.168.255.255   (Класс C)

IPv6 АДРЕС (128 бит):
2001:0db8:85a3:0000:0000:8a2e:0370:7334

МАСКА ПОДСЕТИ:
IP:    192.168.1.100
Маска: 255.255.255.0  или /24
       ↑
     24 единицы, 8 нулей

Сеть:  192.168.1.0    (сетевая часть)
Хост:  0.0.0.100      (хостовая часть)

СПЕЦИАЛЬНЫЕ АДРЕСА:
127.0.0.1     - localhost (локальный компьютер)
0.0.0.0       - любой адрес
255.255.255.255 - широковещательный адрес`
          }
        ],
        practice: [
          {
            id: 'net-q1',
            type: 'multiple-choice',
            question: 'Что означает аббревиатура LAN?',
            options: [
              'Large Area Network',
              'Local Area Network', 
              'Limited Access Network',
              'Linear Array Network'
            ],
            correctAnswer: 1,
            explanation: 'LAN (Local Area Network) - локальная вычислительная сеть, объединяющая устройства в ограниченной географической области.',
            hint: 'Подумайте о сети в пределах одного здания или офиса.'
          },
          {
            id: 'net-q2',
            type: 'multiple-choice',
            question: 'Какая топология сети наиболее устойчива к отказу одного узла?',
            options: ['Шина', 'Кольцо', 'Звезда', 'Сетка'],
            correctAnswer: 3,
            explanation: 'В топологии "сетка" каждый узел соединен с несколькими другими, что обеспечивает альтернативные пути передачи данных.',
            hint: 'В какой топологии есть несколько путей между узлами?'
          },
          {
            id: 'net-q3',
            type: 'multiple-choice',
            question: 'Какой протокол отвечает за надежную доставку данных в интернете?',
            options: ['IP', 'HTTP', 'TCP', 'DNS'],
            correctAnswer: 2,
            explanation: 'TCP (Transmission Control Protocol) обеспечивает надежную, упорядоченную доставку данных с контролем ошибок.',
            hint: 'Этот протокол проверяет, что все данные дошли до получателя.'
          },
          {
            id: 'net-q4',
            type: 'multiple-choice',
            question: 'Что такое IP-адрес?',
            options: [
              'Имя пользователя в сети',
              'Уникальный номер устройства в сети',
              'Пароль для доступа к интернету',
              'Скорость подключения к сети'
            ],
            correctAnswer: 1,
            explanation: 'IP-адрес - это уникальный числовой идентификатор устройства в сети, аналогичный почтовому адресу.',
            hint: 'Подумайте о том, как компьютеры находят друг друга в сети.'
          },
          {
            id: 'net-q5',
            type: 'multiple-choice',
            question: 'Сколько уровней в модели OSI?',
            options: ['5', '6', '7', '8'],
            correctAnswer: 2,
            explanation: 'Модель OSI состоит из 7 уровней, каждый из которых выполняет определенные функции в процессе передачи данных.',
            hint: 'Это классическая модель, которая делит сетевое взаимодействие на несколько абстрактных уровней.'
          },
          {
            id: 'net-q6',
            type: 'coding',
            question: 'Определите, к какому классу относится IP-адрес 172.16.10.5',
            codeTemplate: `ip_address = "172.16.10.5"

# Получите первый октет
first_octet = 

# Определите класс сети
if first_octet >= 1 and first_octet <= 126:
    network_class = "A"
elif first_octet >= 128 and first_octet <= 191:
    network_class = 
elif first_octet >= 192 and first_octet <= 223:
    network_class = "C"
else:
    network_class = "Неизвестный"

print(f"IP-адрес {ip_address} относится к классу {network_class}")`,
            explanation: 'Класс IP-адреса определяется значением первого октета.',
            hint: 'Разделите IP-адрес по точкам и возьмите первое число.'
          },
          {
            id: 'net-q7',
            type: 'coding',
            question: 'Напишите функцию для проверки, является ли IP-адрес частным (локальным).',
            codeTemplate: `def is_private_ip(ip):
    # Разбейте IP на октеты
    octets = ip.split('.')
    first = int(octets[0])
    second = int(octets[1])
    
    # Проверьте диапазоны частных адресов
    # 10.0.0.0 - 10.255.255.255
    # 172.16.0.0 - 172.31.255.255  
    # 192.168.0.0 - 192.168.255.255
    
    return  # Ваш код здесь

# Тест
print(is_private_ip("192.168.1.1"))   # True
print(is_private_ip("8.8.8.8"))       # False`,
            explanation: 'Частные адреса используются в локальных сетях и не маршрутизируются в интернете.',
            hint: 'Проверьте, попадает ли адрес в один из трех диапазонов частных адресов.'
          },
          {
            id: 'net-q8',
            type: 'coding',
            question: 'Создайте функцию для вычисления сетевого адреса по IP и маске подсети.',
            codeTemplate: `def get_network_address(ip, mask):
    # Преобразуйте IP и маску в числа
    ip_parts = [int(x) for x in ip.split('.')]
    mask_parts = [int(x) for x in mask.split('.')]
    
    # Примените маску (побитовое И)
    network_parts = []
    for i in range(4):
        network_parts.append()  # ip_parts[i] & mask_parts[i]
    
    return '.'.join(map(str, network_parts))

# Тест  
ip = "192.168.1.100"
mask = "255.255.255.0"
print(get_network_address(ip, mask))  # 192.168.1.0`,
            explanation: 'Сетевой адрес получается применением маски подсети к IP-адресу с помощью операции И.',
            hint: 'Используйте побитовую операцию & для каждого октета.'
          },
          {
            id: 'net-q9',
            type: 'coding',
            question: 'Напишите функцию для подсчета количества хостов в подсети по маске.',
            codeTemplate: `def count_hosts(mask):
    # Преобразуйте маску в двоичный вид
    mask_parts = [int(x) for x in mask.split('.')]
    
    # Подсчитайте количество нулевых бит
    host_bits = 0
    for part in mask_parts:
        # Подсчитайте нули в каждом октете
        for bit in range(8):
            if (part >> bit) & 1 == 0:
                host_bits += 1
    
    # Количество хостов = 2^host_bits - 2
    return  # Ваша формула

# Тест
print(count_hosts("255.255.255.0"))    # 254
print(count_hosts("255.255.0.0"))      # 65534`,
            explanation: 'Количество хостов определяется количеством нулевых битов в маске подсети.',
            hint: 'Формула: 2^(количество_нулевых_битов) - 2 (вычитаем адрес сети и broadcast)'
          },
          {
            id: 'net-q10',
            type: 'coding',
            question: 'Создайте простой эмулятор DNS, который преобразует доменные имена в IP-адреса.',
            codeTemplate: `class SimpleDNS:
    def __init__(self):
        # Таблица соответствия доменов и IP
        self.dns_table = {
            "google.com": "8.8.8.8",
            "yandex.ru": "77.88.55.77", 
            "github.com": "140.82.112.4",
            "stackoverflow.com": "151.101.1.69"
        }
    
    def resolve(self, domain):
        # Найдите IP по домену
        return 
    
    def add_record(self, domain, ip):
        # Добавьте новую запись
        pass

# Тест
dns = SimpleDNS()
print(dns.resolve("google.com"))       # 8.8.8.8
dns.add_record("example.com", "1.2.3.4")
print(dns.resolve("example.com"))      # 1.2.3.4`,
            explanation: 'DNS преобразует понятные человеку доменные имена в IP-адреса.',
            hint: 'Используйте словарь для хранения соответствий домен -> IP.'
          },
          {
            id: 'net-q11',
            type: 'coding',
            question: 'Реализуйте функцию для проверки корректности IPv4 адреса.',
            codeTemplate: `def is_valid_ipv4(ip):
    # Разделите по точкам
    parts = ip.split('.')
    
    # Проверьте количество частей
    if len(parts) != 4:
        return False
    
    # Проверьте каждую часть
    for part in parts:
        try:
            num = int(part)
            # Проверьте диапазон 0-255
            if :  # Ваше условие
                return False
        except ValueError:
            return False
    
    return True

# Тест
print(is_valid_ipv4("192.168.1.1"))    # True
print(is_valid_ipv4("256.1.1.1"))      # False  
print(is_valid_ipv4("192.168.1"))      # False`,
            explanation: 'Корректный IPv4 адрес состоит из 4 октетов, каждый в диапазоне 0-255.',
            hint: 'Проверьте, что частей ровно 4, каждая часть - число от 0 до 255.'
          },
          {
            id: 'net-q12',
            type: 'coding',
            question: 'Напишите функцию для конвертации маски подсети из десятичной записи в CIDR.',
            codeTemplate: `def mask_to_cidr(mask):
    # Преобразуйте маску в двоичный вид
    mask_parts = [int(x) for x in mask.split('.')]
    
    # Подсчитайте единичные биты
    cidr_bits = 0
    for part in mask_parts:
        # Подсчитайте единицы в каждом октете
        while part:
            cidr_bits += part & 1
            part >>= 1
    
    return cidr_bits

# Альтернативный способ
def mask_to_cidr_v2(mask):
    # Преобразуйте в двоичную строку и подсчитайте '1'
    binary = ''.join(format(int(x), '08b') for x in mask.split('.'))
    return binary.count('1')

# Тест
print(mask_to_cidr("255.255.255.0"))   # 24
print(mask_to_cidr("255.255.0.0"))     # 16`,
            explanation: 'CIDR показывает количество единичных битов в маске подсети.',
            hint: 'Преобразуйте каждый октет в двоичный вид и посчитайте единицы.'
          },
          {
            id: 'net-q13',
            type: 'open-ended',
            question: 'Объясните разницу между протоколами TCP и UDP. В каких случаях лучше использовать каждый из них?',
            explanation: 'TCP обеспечивает надежность, UDP - скорость. TCP для веб-страниц, почты; UDP для видео, игр.',
            hint: 'Подумайте о ситуациях, где важна гарантия доставки vs. где важна скорость.'
          },
          {
            id: 'net-q14',
            type: 'open-ended',
            question: 'Почему был создан протокол IPv6? Какие проблемы IPv4 он решает?',
            explanation: 'IPv6 решает проблему нехватки адресов IPv4, обеспечивает лучшую безопасность и упрощает конфигурацию.',
            hint: 'Подумайте о том, сколько устройств сейчас подключено к интернету.'
          },
          {
            id: 'net-q15',
            type: 'open-ended',
            question: 'Как работает система доменных имен (DNS)? Опишите процесс преобразования domain.com в IP-адрес.',
            explanation: 'DNS работает иерархически: локальный кэш → локальный DNS → корневые серверы → авторитетные серверы домена.',
            hint: 'Представьте это как телефонную книгу интернета с несколькими уровнями поиска.'
          }
        ]
      }
    ]
  },
  {
    id: 'web-development',
    title: 'Веб-разработка',
    description: 'Создание современных веб-сайтов и приложений',
    icon: 'code',
    color: 'bg-orange-500',
    estimatedMinutes: 35,
    difficulty: 'Средне',
    xpReward: 16,
    lessons: [
      {
        id: 'web-basics',
        title: 'Основы веб-разработки',
        theory: [
          {
            id: 'how-web-works',
            title: 'Как работает веб?',
            type: 'text',
            content: `<h3>Принципы работы World Wide Web</h3>
            
            <p><strong>Веб</strong> (World Wide Web) — это система взаимосвязанных документов, доступных через интернет.</p>
            
            <h4>Основные компоненты веба:</h4>
            <ul>
              <li><strong>Веб-браузер</strong> — программа для просмотра веб-страниц (Chrome, Firefox, Safari)</li>
              <li><strong>Веб-сервер</strong> — компьютер, который хранит и отдает веб-страницы</li>
              <li><strong>HTML</strong> — язык разметки для создания структуры страниц</li>
              <li><strong>CSS</strong> — язык стилей для оформления внешнего вида</li>
              <li><strong>JavaScript</strong> — язык программирования для интерактивности</li>
            </ul>
            
            <h4>Как происходит загрузка веб-страницы:</h4>
            <ol>
              <li>Пользователь вводит адрес в браузере</li>
              <li>Браузер отправляет HTTP-запрос на сервер</li>
              <li>Сервер находит запрашиваемый файл</li>
              <li>Сервер отправляет файл обратно в браузер</li>
              <li>Браузер отображает страницу пользователю</li>
            </ol>
            
            <p><strong>HTTP</strong> (HyperText Transfer Protocol) — протокол передачи данных в вебе.</p>`
          },
          {
            id: 'html-basics',
            title: 'Основы HTML',
            type: 'code',
            codeLanguage: 'html',
            content: `<!-- HTML (HyperText Markup Language) - язык разметки веб-страниц -->
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Моя первая веб-страница</title>
</head>
<body>
    <!-- Заголовки -->
    <h1>Главный заголовок</h1>
    <h2>Подзаголовок</h2>
    
    <!-- Параграфы и текст -->
    <p>Это обычный параграф текста.</p>
    <p>Текст может быть <strong>жирным</strong> или <em>курсивом</em>.</p>
    
    <!-- Списки -->
    <h3>Маркированный список:</h3>
    <ul>
        <li>Первый элемент</li>
        <li>Второй элемент</li>
        <li>Третий элемент</li>
    </ul>
    
    <h3>Нумерованный список:</h3>
    <ol>
        <li>Шаг первый</li>
        <li>Шаг второй</li>
        <li>Шаг третий</li>
    </ol>
    
    <!-- Ссылки -->
    <p>Посетите <a href="https://www.google.com">Google</a></p>
    
    <!-- Изображения -->
    <img src="image.jpg" alt="Описание изображения" width="300">
    
    <!-- Блоки -->
    <div>
        <h4>Это блок</h4>
        <p>Блоки используются для группировки элементов</p>
    </div>
    
    <!-- Формы -->
    <form>
        <label for="name">Имя:</label>
        <input type="text" id="name" name="name">
        
        <label for="email">Email:</label>
        <input type="email" id="email" name="email">
        
        <button type="submit">Отправить</button>
    </form>
</body>
</html>`
          },
          {
            id: 'css-basics',
            title: 'Основы CSS',
            type: 'code',
            codeLanguage: 'css',
            content: `/* CSS (Cascading Style Sheets) - язык стилей для веб-страниц */

/* Селекторы по тегу */
h1 {
    color: blue;
    font-size: 36px;
    text-align: center;
}

p {
    color: #333;
    line-height: 1.5;
    margin: 10px 0;
}

/* Селекторы по классу */
.highlight {
    background-color: yellow;
    padding: 10px;
    border-radius: 5px;
}

.container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
}

/* Селекторы по ID */
#header {
    background-color: #f0f0f0;
    padding: 20px;
    border-bottom: 2px solid #ccc;
}

/* Комбинированные селекторы */
.container p {
    font-size: 16px;
}

.button:hover {
    background-color: #007bff;
    color: white;
    cursor: pointer;
}

/* Flexbox для макета */
.flex-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 20px;
}

/* Адаптивность */
@media (max-width: 768px) {
    .container {
        padding: 10px;
    }
    
    h1 {
        font-size: 24px;
    }
}

/* Анимации */
.fade-in {
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
}

.fade-in:hover {
    opacity: 1;
}`
          },
          {
            id: 'javascript-basics',
            title: 'Основы JavaScript',
            type: 'code',
            codeLanguage: 'javascript',
            content: `// JavaScript - язык программирования для веб-браузеров

// Переменные
let userName = "Анна";
const age = 25;
var isActive = true;

// Функции
function greetUser(name) {
    return "Привет, " + name + "!";
}

// Стрелочные функции (современный синтаксис)
const calculateSum = (a, b) => a + b;

// Работа с DOM (Document Object Model)
// Получение элементов
const button = document.getElementById('myButton');
const paragraph = document.querySelector('.text');
const allLinks = document.querySelectorAll('a');

// Изменение содержимого
paragraph.textContent = "Новый текст";
paragraph.innerHTML = "<strong>Жирный текст</strong>";

// Добавление обработчиков событий
button.addEventListener('click', function() {
    alert('Кнопка нажата!');
});

// Изменение стилей
button.style.backgroundColor = 'blue';
button.style.color = 'white';

// Работа с классами CSS
button.classList.add('active');
button.classList.remove('inactive');
button.classList.toggle('highlight');

// Создание новых элементов
const newDiv = document.createElement('div');
newDiv.textContent = 'Новый элемент';
document.body.appendChild(newDiv);

// Асинхронные операции
setTimeout(() => {
    console.log('Это сообщение появится через 2 секунды');
}, 2000);

// Современный JavaScript (ES6+)
// Деструктуризация
const person = { name: 'Иван', age: 30 };
const { name, age: personAge } = person;

// Шаблонные строки
const message = \`Привет, меня зовут \${name} и мне \${personAge} лет\`;

// Промисы для асинхронного кода
fetch('https://api.example.com/data')
    .then(response => response.json())
    .then(data => console.log(data))
    .catch(error => console.error('Ошибка:', error));`
          }
        ],
        practice: [
          {
            id: 'web-q1',
            type: 'multiple-choice',
            question: 'Что означает аббревиатура HTML?',
            options: [
              'High Tech Modern Language',
              'HyperText Markup Language',
              'Home Tool Markup Language',
              'HyperText Modern Language'
            ],
            correctAnswer: 1,
            explanation: 'HTML расшифровывается как HyperText Markup Language - язык разметки гипертекста.',
            hint: 'Это язык для создания структуры веб-страниц.'
          },
          {
            id: 'web-q2',
            type: 'multiple-choice',
            question: 'Какой тег HTML используется для создания заголовка первого уровня?',
            options: ['<header>', '<h1>', '<title>', '<head>'],
            correctAnswer: 1,
            explanation: 'Тег <h1> создает заголовок первого (самого высокого) уровня на веб-странице.',
            hint: 'Заголовки в HTML обозначаются буквой h и цифрой уровня.'
          },
          {
            id: 'web-q3',
            type: 'multiple-choice',
            question: 'Что такое CSS?',
            options: [
              'Язык программирования',
              'Язык стилей для оформления веб-страниц',
              'Система управления базами данных',
              'Протокол передачи данных'
            ],
            correctAnswer: 1,
            explanation: 'CSS (Cascading Style Sheets) - это язык стилей, используемый для описания внешнего вида HTML-документов.',
            hint: 'CSS отвечает за то, как выглядит веб-страница.'
          },
          {
            id: 'web-q4',
            type: 'multiple-choice',
            question: 'Какой символ используется в CSS для селекции элементов по классу?',
            options: ['#', '.', '&', '*'],
            correctAnswer: 1,
            explanation: 'Точка (.) используется в CSS для выбора элементов по классу, например .my-class.',
            hint: 'Этот символ также используется как десятичный разделитель.'
          },
          {
            id: 'web-q5',
            type: 'multiple-choice',
            question: 'Что такое DOM в контексте веб-разработки?',
            options: [
              'Document Object Model',
              'Data Object Management',
              'Dynamic Output Method',
              'Design Operations Manual'
            ],
            correctAnswer: 0,
            explanation: 'DOM (Document Object Model) - это программный интерфейс для HTML и XML документов, представляющий структуру документа как дерево объектов.',
            hint: 'Это способ представления HTML-документа в виде объектов, с которыми может работать JavaScript.'
          },
          {
            id: 'web-q6',
            type: 'coding',
            question: 'Создайте базовую HTML-структуру для страницы "О нас".',
            codeTemplate: `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title></title>
</head>
<body>
    <!-- Добавьте заголовок страницы -->
    
    <!-- Добавьте параграф с описанием -->
    
    <!-- Добавьте список преимуществ (3-4 пункта) -->
    
</body>
</html>`,
            explanation: 'Используйте теги h1 для заголовка, p для параграфа и ul/li для списка.',
            hint: 'Заголовок - h1, описание - p, список - ul с несколькими li внутри.'
          },
          {
            id: 'web-q7',
            type: 'coding',
            question: 'Напишите CSS для стилизации кнопки с эффектом при наведении.',
            codeTemplate: `.button {
    /* Базовые стили кнопки */
    padding: ;
    background-color: ;
    color: ;
    border: ;
    border-radius: ;
    cursor: ;
}

.button:hover {
    /* Стили при наведении */
    background-color: ;
    
}`,
            explanation: 'Используйте padding для внутренних отступов, background-color для фона, :hover для эффекта наведения.',
            hint: 'Не забудьте cursor: pointer и измените цвет фона при :hover.'
          },
          {
            id: 'web-q8',
            type: 'coding',
            question: 'Создайте JavaScript функцию для изменения текста элемента при нажатии на кнопку.',
            codeTemplate: `function changeText() {
    // Получите элемент с id "text"
    const textElement = document.getElementById();
    
    // Измените его содержимое
    textElement.textContent = ;
}

// Добавьте обработчик события для кнопки с id "button"
const button = document.getElementById();
button.addEventListener('click', );`,
            explanation: 'Используйте getElementById для получения элементов и addEventListener для обработки события клика.',
            hint: 'getElementById("text"), textContent для изменения текста, addEventListener("click", функция).'
          },
          {
            id: 'web-q9',
            type: 'coding',
            question: 'Создайте адаптивную сетку с помощью CSS Flexbox.',
            codeTemplate: `.container {
    display: ;
    flex-wrap: ;
    gap: ;
    padding: ;
}

.item {
    flex: ;
    min-width: ;
    background-color: ;
    padding: ;
    border-radius: ;
}

/* Медиа-запрос для мобильных устройств */
@media (max-width: 768px) {
    .item {
        flex: ;
    }
}`,
            explanation: 'Flexbox позволяет создавать гибкие макеты. flex: 1 делает элементы одинакового размера.',
            hint: 'display: flex, flex-wrap: wrap, flex: 1 для равномерного распределения.'
          },
          {
            id: 'web-q10',
            type: 'coding',
            question: 'Напишите JavaScript код для простой валидации формы.',
            codeTemplate: `function validateForm() {
    // Получите значения полей формы
    const name = document.getElementById('name').value;
    const email = document.getElementById('email').value;
    
    // Проверьте, что имя не пустое
    if (name.trim() === '') {
        alert();
        return false;
    }
    
    // Проверьте формат email
    const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;
    if (!emailPattern.test(email)) {
        alert();
        return false;
    }
    
    alert('Форма успешно отправлена!');
    return true;
}`,
            explanation: 'Валидация проверяет корректность введенных данных перед отправкой формы.',
            hint: 'Используйте trim() для удаления пробелов, регулярное выражение для проверки email.'
          },
          {
            id: 'web-q11',
            type: 'coding',
            question: 'Создайте анимированное меню с помощью CSS.',
            codeTemplate: `.menu {
    list-style: none;
    display: flex;
    gap: 20px;
}

.menu-item {
    position: relative;
}

.menu-item a {
    text-decoration: none;
    color: #333;
    padding: 10px 15px;
    display: block;
    transition: ;
}

.menu-item a:hover {
    color: ;
    transform: ;
}

/* Добавьте анимированную подчеркивание */
.menu-item a::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 0;
    height: 2px;
    background-color: #007bff;
    transition: ;
}

.menu-item a:hover::after {
    width: ;
}`,
            explanation: 'CSS transitions и псевдоэлементы позволяют создавать красивые анимации.',
            hint: 'transition: all 0.3s ease, transform: translateY(-2px), width: 100%.'
          },
          {
            id: 'web-q12',
            type: 'coding',
            question: 'Создайте функцию для динамического добавления элементов в список.',
            codeTemplate: `function addListItem() {
    // Получите значение из поля ввода
    const input = document.getElementById('itemInput');
    const itemText = input.value.trim();
    
    // Проверьте, что поле не пустое
    if (itemText === '') {
        return;
    }
    
    // Создайте новый элемент списка
    const listItem = document.createElement();
    listItem.textContent = ;
    
    // Добавьте кнопку удаления
    const deleteButton = document.createElement();
    deleteButton.textContent = 'Удалить';
    deleteButton.onclick = function() {
        ;  // Удалите элемент из списка
    };
    
    listItem.appendChild(deleteButton);
    
    // Добавьте элемент в список
    const list = document.getElementById('itemList');
    list.appendChild();
    
    // Очистите поле ввода
    input.value = '';
}`,
            explanation: 'createElement создает новые HTML элементы, appendChild добавляет их в DOM.',
            hint: 'createElement("li"), listItem.remove() для удаления, appendChild(listItem).'
          },
          {
            id: 'web-q13',
            type: 'open-ended',
            question: 'Объясните разницу между семантическими и несемантическими HTML тегами. Приведите примеры и объясните, почему важно использовать семантические теги.',
            explanation: 'Семантические теги (header, nav, article, section) описывают смысл содержимого, что важно для SEO и доступности.',
            hint: 'Подумайте о тегах, которые несут смысловую нагрузку vs. просто оформляют внешний вид.'
          },
          {
            id: 'web-q14',
            type: 'open-ended',
            question: 'Что такое адаптивная веб-разработка? Какие техники используются для создания сайтов, которые хорошо выглядят на разных устройствах?',
            explanation: 'Адаптивный дизайн использует медиа-запросы, гибкие сетки, относительные единицы измерения для адаптации под разные экраны.',
            hint: 'Подумайте о том, как сайты изменяются при просмотре на телефоне vs. компьютере.'
          },
          {
            id: 'web-q15',
            type: 'open-ended',
            question: 'Опишите процесс загрузки веб-страницы от момента ввода URL в адресную строку до отображения страницы в браузере.',
            explanation: 'DNS-запрос → HTTP-запрос → получение HTML → загрузка CSS/JS → построение DOM → отображение.',
            hint: 'Подумайте о всех шагах: найти сервер, запросить страницу, загрузить ресурсы, отобразить.'
          }
        ]
      }
    ]
  }
];